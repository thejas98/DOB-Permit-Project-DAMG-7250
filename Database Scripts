// Uniqueness Constraints.
CREATE CONSTRAINT FOR (p:Permits) REQUIRE p.permit_sequence__ IS UNIQUE;
CREATE CONSTRAINT FOR (j:Job) REQUIRE j.job__ IS UNIQUE;
CREATE CONSTRAINT FOR (bo:Borough) REQUIRE bo.borough IS UNIQUE;

// Create Building node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (b:Building {bin__:row.bin__})
ON CREATE SET b.house__ = row.house__, b.street_name = row.street_name, b.community_board = row.community_board,
b.zip_code = row.zip_code, b.bldg_type = row.bldg_type, b.residential = row.residential,
b.gis_latitude = row.gis_latitude, b.gis_longitude = row.gis_longitude;

// Create Permits node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (p:Permits {permit_sequence__:row.permit_sequence__})
ON CREATE SET p.work_type = row.work_type, p.permit_status = row.permit_status, p.permit_type = row.permit_type,
p.permit_subtype = row.permit_subtype;

// Create Job node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (j:Job {job__:row.job__})
ON CREATE SET j.job_doc___ = row.job_doc___, j.job_type = row.job_type;

// Create Permittee node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (pe:Permittee {permittee_s_first_name:row.permittee_s_first_name})
ON CREATE SET pe.permittee_s_last_name = row.permittee_s_last_name, pe.permittee_s_phone__ = row.permittee_s_phone__,
pe.permittee_s_license__ = row.permittee_s_license__, pe.act_as_superintendent = row.act_as_superintendent;

// Create Filing node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (f:Filing {filing_status:row.filing_status})
ON CREATE SET f.filing_date = row.filing_date, f.issuance_date = row.issuance_date,
f.expiration_date = row.expiration_date, f.job_start_date = row.job_start_date;

// Create Borough node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
CREATE (bo:Borough {borough:row.borough})

// Create Owner node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (o:Owner {owner_s_business_type:row.owner_s_business_type})
ON CREATE SET o.owner_s_first_name = row.owner_s_first_name, o.owner_s_last_name = row.owner_s_last_name,
o.owner_s_phone__ = row.owner_s_phone__;

// Create Address node
LOAD CSV WITH HEADERS FROM 'file:///small_clean.csv' AS row
MERGE (a:Address {owner_s_house__:row.owner_s_house__})
ON CREATE SET a.owner_s_house_street_name = row.owner_s_house_street_name, a.city = row.city,
a.state = row.state, a.owner_s_zip_code = row.owner_s_zip_code;

// Create Building-Permits reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (b:Building {bin__:row.bin__})
     MATCH (p:Permits {permit_sequence__:row.permit_sequence__})
     MERGE (b)-[:HAS]->(p);

// Create Permits-Job reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (p:Permits {permit_sequence__:row.permit_sequence__})
     MATCH (j:Job {job__:row.job__})
     MERGE (p)-[:HAS]->(j);

// Create Permits-Permittee reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (p:Permits {permit_sequence__:row.permit_sequence__})
     MATCH (pe:Permittee {permittee_s_first_name:row.permittee_s_first_name})
     MERGE (p)-[:ISSUED_TO]->(pe);

// Create Permits-Filing reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (p:Permits {permit_sequence__:row.permit_sequence__})
     MATCH (f:Filing {filing_status:row.filing_status})
     MERGE (p)-[:HAS]->(f);

// Create Building-Borough reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (b:Building {bin__:row.bin__})
     MATCH (bo:Borough {borough:row.borough})
     MERGE (b)-[:IS_PART_OF]->(bo);

// Create Owner-Building reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (o:Owner {owner_s_business_type:row.owner_s_business_type})
     MATCH (b:Building {bin__:row.bin__})
     MERGE (o)-[:OWNS]->(b);

// Create Owner-Address reltionship
LOAD CSV With HEADERS FROM 'file:///small_clean.csv' AS row
     MATCH (o:Owner {owner_s_business_type:row.owner_s_business_type})
     MATCH (a:Address {owner_s_house__:row.owner_s_house__})
     MERGE (o)-[:LIVES_AT]->(a);
