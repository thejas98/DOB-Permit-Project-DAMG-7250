// Uniqueness Constraints.
CREATE CONSTRAINT FOR (pe:Permittee) REQUIRE pe.permittee_s_license__ IS UNIQUE;
CREATE CONSTRAINT FOR (p:Permit) REQUIRE p.permit_si_no IS UNIQUE;
CREATE CONSTRAINT FOR (j:Job) REQUIRE j.job__ IS UNIQUE;
CREATE CONSTRAINT FOR (s:Superintendent) REQUIRE s.superintendent_first___last_name IS UNIQUE;
CREATE CONSTRAINT FOR (ny:NYC) REQUIRE ny.borough IS UNIQUE;
CREATE CONSTRAINT FOR (b:Building) REQUIRE b.bin__ IS UNIQUE;
CREATE CONSTRAINT FOR (h:House) REQUIRE h.house_id IS UNIQUE;
CREATE CONSTRAINT FOR (l:Location) REQUIRE l.location_id IS UNIQUE;
CREATE CONSTRAINT FOR (ad:Address) REQUIRE ad.owner_s_house__ IS UNIQUE;
CREATE CONSTRAINT FOR (o:Owner) REQUIRE o.owner_id IS UNIQUE;


// Nodes
// Create Building node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (b:Building {bin__:row.bin__})
ON CREATE SET 
b.bldg_type = row.bldg_type, 
b.residential = row.residential,
b.non_profit = row.non_profit
} in transactions of 10000 rows;


// Create Location node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (l:Location {location_id:row.location_id})
ON CREATE SET
l.street_name = row.street_name,
l.zip_code = row.zip_code, 
l.block = row.block,
l.lot = row.lot,
l.community_board = row.community_board,
l.gis_council_district = row.gis_council_district,
l.gis_census_tract = row.gis_census_tract,
l.gis_nta_name = row.gis_nta_name
} in transactions of 10000 rows;



// Create House node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (h:House {house_id:row.house_id})
ON CREATE SET 
h.house__ = row.house__, 
h.gis_latitude = row.gis_latitude,
h.gis_longitude = row.gis_longitude
} in transactions of 10000 rows;


// Create NYC node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (n:NYC {borough:row.borough})
} in transactions of 10000 rows;



// Create Permit node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (p:Permit {permit_si_no:row.permit_si_no})
ON CREATE SET
p.permit_subtype = row.permit_subtype,
p.work_type = row.work_type, 
p.permit_status = row.permit_status, 
p.permit_sequence__ = row.permit_sequence__,
p.permit_type = row.permit_type,
p.self_cert = row.self_cert,
p.filing_status = row.filing_status
} in transactions of 10000 rows;



// Create Job node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (j:Job {job__:row.job__})
ON CREATE SET 
j.job_doc___ = row.job_doc___, 
j.job_type = row.job_type,
j.job_start_date = row.job_start_date
} in transactions of 10000 rows;




// Create Permittee node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (pe:Permittee {permittee_s_license__:row.permittee_s_license__})
ON CREATE SET
pe.permittee_s_business_name = row.permittee_s_business_name,
pe.permittee_s_first_name = row.permittee_s_first_name,
pe.permittee_s_last_name = row.permittee_s_last_name,
pe.permittee_s_phone__ = row.permittee_s_phone__,
pe.permittee_s_license_type = row.permittee_s_license_type, 
pe.act_as_superintendent = row.act_as_superintendent
} in transactions of 10000 rows;




// Create Superintendent node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (s:Superintendent {superintendent_first___last_name:row.superintendent_first___last_name})
ON CREATE SET s.superintendent_business_name = row.superintendent_business_name
} in transactions of 10000 rows;



// Create Owner node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (o:Owner {owner_id:row.owner_id})
ON CREATE SET 
o.owner_s_first_name = row.owner_s_first_name, 
o.owner_s_last_name = row.owner_s_last_name, 
o.owner_s_business_name = row.owner_s_business_name, 
o.owner_s_phone__ = row.owner_s_phone__,
o.owner_s_business_type = row.owner_s_business_type
} in transactions of 10000 rows;




// Create Address node
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
MERGE (ad:Address {owner_s_house__:row.owner_s_house__})
ON CREATE SET 
ad.owner_s_house_street_name=row.owner_s_house_street_name,
ad.city = row.city,
ad.state = row.state, 
ad.owner_s_zip_code = row.owner_s_zip_code
} in transactions of 10000 rows;


// Relationships
// Create House-Location reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (h:House {house_id:row.house_id})
     MATCH (l:Location {location_id:row.location_id})
     MERGE (h)-[:IS_AT]->(l)} 
in transactions of 10000 rows;



// Relationships
// Create House-Building reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (h:House {house_id:row.house_id})
     MATCH (b:Building {bin__:row.bin__})
     MERGE (h)-[:IS_PART_OF]->(b)} 
in transactions of 10000 rows;



// Create House-NYC reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (h:House {house_id:row.house_id})
     MATCH (n:NYC {borough:row.borough})
     MERGE (h)-[:IS_PART_OF]->(n)} 
in transactions of 10000 rows;



// Create House-Owner reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (h:House {house_id:row.house_id})
     MATCH (o:Owner {owner_id:row.owner_id})
     MERGE (h)-[:IS_OWNED_BY]->(o)} 
in transactions of 10000 rows;



// Create Permit-Superintendent reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (p:Permit {permit_si_no:row.permit_si_no})
     MATCH (s:Superintendent {superintendent_first___last_name:row.superintendent_first___last_name})
     MERGE (p)-[:HAS]->(s)} 
in transactions of 10000 rows;



// Create House-Job reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (h:House {house_id:row.house_id})
     MATCH (j:Job {job__:row.job__})
     MERGE (h)-[:HAS]->(j)} 
in transactions of 10000 rows;



// Create Job-Permit reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (j:Job {job__:row.job__})
     MATCH (p:Permit {permit_si_no:row.permit_si_no})
     MERGE (j)-[:HAS {issuance_date: row.issuance_date, filing_date: row.filing_date, expiration_date: row.expiration_date}]->(p)} 
in transactions of 10000 rows;



// Create Permit-Permittee reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (p:Permit {permit_si_no:row.permit_si_no})
     MATCH (pe:Permittee {permittee_s_license__:row.permittee_s_license__})
     MERGE (p)-[:IS_ISSUED_TO]->(pe)} 
in transactions of 10000 rows;



// Create Owner-Address reltionship
:auto load csv with headers from 'file:///DOB_Permit_Issuance_clean.csv' as row
call {
with row
     MATCH (o:Owner {owner_id:row.owner_id})
     MATCH (ad:Address {owner_s_house__:row.owner_s_house__})
     MERGE (o)-[:LIVES_AT]->(ad)} 
in transactions of 10000 rows;


